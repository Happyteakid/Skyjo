name: build-android-apk

on:
  workflow_dispatch:
  push:
    paths:
      - 'skyjo_kivy/**'
      - '.github/workflows/build-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: skyjo_kivy   # folder with buildozer.spec + main.py
    steps:
      - uses: actions/checkout@v4

      - name: Show tree (debug)
        run: |
          echo "Repo root:"
          ls -la ..
          echo
          echo "skyjo_kivy:"
          ls -la

      # ---- System deps (Ubuntu 24.04-friendly; no libtinfo5) ----
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git python3-pip python3-dev \
            openjdk-17-jdk unzip zip \
            libssl-dev libffi-dev zlib1g-dev \
            libbz2-dev liblzma-dev libreadline-dev \
            libsqlite3-dev libgdbm-dev libgdbm-compat-dev \
            libncurses-dev cmake pkg-config wget

      # ---- Ensure Java 17 is the selected JDK for Gradle ----
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # ---- Buildozer & PATH (don’t clobber PATH; append via GITHUB_PATH) ----
      - name: Install Buildozer
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --user buildozer Cython
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # ---- Android SDK cmdline-tools + core packages ----
      - name: Prepare Android SDK & licenses
        run: |
          export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools" "$ANDROID_SDK_ROOT/licenses"
          # Precreate license files to avoid prompts
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_SDK_ROOT/licenses/android-sdk-preview-license"

          # Install cmdline-tools
          cd "$ANDROID_SDK_ROOT"
          CT_ZIP="commandlinetools-linux-11076708_latest.zip"
          wget -q https://dl.google.com/android/repository/$CT_ZIP
          unzip -q $CT_ZIP -d cmdline-tools
          rm -f $CT_ZIP
          # Place under 'latest' as expected
          if [ -d cmdline-tools/cmdline-tools ]; then
            mv cmdline-tools/cmdline-tools cmdline-tools/latest
          fi
          # Legacy shim for older p4a which looks for tools/bin
          mkdir -p "$ANDROID_SDK_ROOT/tools/bin"
          ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "$ANDROID_SDK_ROOT/tools/bin/sdkmanager"
          ln -sf "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager" "$ANDROID_SDK_ROOT/tools/bin/avdmanager"

          # Install core SDK packages (no interactive license prompts)
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" "platforms;android-34" "build-tools;35.0.0"

      # ---- Persist Android env (don’t use env: PATH=... which clobbers /usr/bin) ----
      - name: Export Android env
        run: |
          echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
          echo "ANDROIDSDK=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
          echo "ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
          echo "ANDROIDAPI=34" >> $GITHUB_ENV
          echo "ANDROIDMINAPI=21" >> $GITHUB_ENV
          echo "$HOME/.buildozer/android/platform/android-sdk/platform-tools" >> $GITHUB_PATH

      # ---- Build APK (debug) ----
      - name: Build APK (debug)
        run: |
          buildozer -v android debug

      # ---- Upload artifact ----
      - name: Upload APK
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: skyjo-apk
          path: bin/*.apk

      # ---- Dump logs on failure (uses normal PATH; find is available) ----
      - name: Dump build logs on failure
        if: ${{ failure() }}
        run: |
          echo "=== Buildozer logs ==="
          find .buildozer -type f \( -name "build*.log" -o -name "build*.txt" \) -print -exec tail -n 120 {} \; || true
